package D_11_组合模式;

import java.util.Arrays;
import java.util.Collections;

/**
 * 组合模式典型的例子就是树结构：
 * -- 由树节点组成一个整体
 */
public class Z2_树结构输出 {

    public static void main(String[] args) {
        Z1_树 子树树节点a = new Z1_树();
        Z1_树 子树树节点b = new Z1_树();
        Z1_树 子树树节点c = new Z1_树();

        Z1_树 子树树节点a1 = new Z1_树();
        Z1_树 子树树节点a2 = new Z1_树();
        Z1_树 子树树节点a3 = new Z1_树();

        Z1_树 子树树节点b1 = new Z1_树();
        Z1_树 子树树节点b2 = new Z1_树();

        Z1_树 子树树节点c1 = new Z1_树();

        Z1_树 顶级树 = new Z1_树();

        子树树节点a.子树 = Arrays.asList(子树树节点a1, 子树树节点a2, 子树树节点a3);
        子树树节点b.子树 = Arrays.asList(子树树节点b1, 子树树节点b2);
        子树树节点c.子树 = Collections.singletonList(子树树节点c1);
        顶级树.子树 = Arrays.asList(子树树节点a, 子树树节点b, 子树树节点c);

        子树树节点a.唯一标识 = "a";
        子树树节点a.树节点名称 = "子树树节点a";
        子树树节点b.唯一标识 = "b";
        子树树节点b.树节点名称 = "子树树节点b";
        子树树节点c.唯一标识 = "c";
        子树树节点c.树节点名称 = "子树树节点c";

        子树树节点a1.唯一标识 = "a1";
        子树树节点a1.树节点名称 = "子树树节点a1";
        子树树节点a2.唯一标识 = "a2";
        子树树节点a2.树节点名称 = "子树树节点a2";
        子树树节点a3.唯一标识 = "a3";
        子树树节点a3.树节点名称 = "子树树节点a3";

        子树树节点b1.唯一标识 = "b1";
        子树树节点b1.树节点名称 = "子树树节点b1";
        子树树节点b2.唯一标识 = "b2";
        子树树节点b2.树节点名称 = "子树树节点b2";

        子树树节点c1.唯一标识 = "c1";
        子树树节点c1.树节点名称 = "子树树节点c1";

        顶级树.唯一标识 = "0";
        顶级树.树节点名称 = "顶级树";

        顶级树.展示树结构整体();
    }

}
