package D_04_建造者模式.S2_建造者模式;

/**
 * 将产品本身与产品创建过程进行解耦，可以使用相同的创建过程来得到不同的产品。也就说细节依赖抽象。
 * 将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰
 * 增加新的具体建造者无需修改原有类库的代码，易于拓展，符合 “开闭原则 “。
 * 应用场景：
 * 需要生成的产品对象有复杂的内部结构，这些产品对象具备共性；
 * 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。
 */
public class N5_运行 {

    /**
     * 缺点：
     * 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。
     * 如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。
     */
    public static void main(String[] args) {

        N4_业主老板 业主老板 = new N4_业主老板();
        N3_建筑工人 建筑工人 = new N3_建筑工人();

        业主老板.找人建房子(建筑工人);
        N1_房子 房子 = 建筑工人.交付房子();
        房子.入住();

    }
}
